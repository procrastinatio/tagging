name: Build and Release

# Add explicit permissions
permissions:
  contents: write
  pull-requests: write

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

jobs:
  build:
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build python-semantic-release
        pip install -U setuptools setuptools_scm wheel

    - name: Debug Version Before
      run: |
        echo "Current directory:"
        pwd
        echo "Content of src/tagging/__init__.py:"
        cat src/tagging/__init__.py
        echo "Git status:"
        git status
        
    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global url."https://${{ secrets.PAT_TAGGING }}@github.com/".insteadOf "https://github.com/"
        
    # For master branch, get next version and update file
    - name: Update Version
      if: github.ref == 'refs/heads/master'
      id: version
      env:
        GH_TOKEN: ${{ secrets.PAT_TAGGING }}
      run: |
        # Get next version
        VERSION=$(semantic-release version --print)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Manually update __init__.py
        echo "__version__ = \"$VERSION\"" > src/tagging/__init__.py
        
        # Commit the version change
        git add src/tagging/__init__.py
        git commit -m "chore: update version to $VERSION [skip ci]"
        git push

    # Now run semantic release to create tag and release
    - name: Semantic Release
      if: github.ref == 'refs/heads/master'
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
      run: semantic-release publish

    # For non-master builds, get development version
    - name: Get Development ID
      if: github.ref != 'refs/heads/master'
      id: dev_version
      run: |
        SHA=$(git rev-parse --short HEAD)
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          ID="pr-${{ github.event.pull_request.number }}-$SHA"
        else
          ID="dev-$SHA"
        fi
        echo "version=$ID" >> $GITHUB_OUTPUT
        
    - name: Debug Version After
      if: github.ref == 'refs/heads/master'
      run: |
        echo "Content of src/tagging/__init__.py after release:"
        cat src/tagging/__init__.py
        echo "Git status:"
        git status


    # Build package AFTER version update
    - name: Build package
      run: |
          python -m build
          echo "VERSION is: $(cat src/tagging/__init__.py )"

    # Set artifact name based on context
    - name: Set Artifact Name
      id: artifact_name
      run: |
        if [ "${{ github.ref }}" = "refs/heads/master" ]; then
          NAME="tagging-v${{ steps.version.outputs.version }}"
        else
          NAME="tagging-${{ steps.dev_version.outputs.version }}"
        fi
        echo "name=$NAME" >> $GITHUB_OUTPUT

    # Upload artifacts with computed name
    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.artifact_name.outputs.name }}
        path: dist/*



    # Create GitHub Release with artifacts
    - name: Create GitHub Release
      if: github.ref == 'refs/heads/master'
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        name: v${{ steps.version.outputs.version }}
        tag_name: v${{ steps.version.outputs.version }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GIT_PAT }}
